Easy https://leetcode.com/problems/binary-search-tree-iterator/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
    vector<int> inord;
    int itr=0;
    void inorder(TreeNode* root, vector<int> &inord){
        if(root==NULL) return;
        inorder(root->left, inord);
        inord.push_back(root->val);
        inorder(root->right, inord);
    }
    BSTIterator(TreeNode* root) {
        inorder(root, inord);

    }
    
    int next() {
        return inord[itr++];
    }
    
    bool hasNext() {
        if(itr>=inord.size()) return false;
        return true;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */



More optimized to use a stack and push all the left nodes there

class BSTIterator {
public:
    stack<TreeNode*> nodeStack;

    // Initialize the iterator and push all the leftmost nodes to the stack
    BSTIterator(TreeNode* root) {
        pushAllLeftNodes(root);
    }

    /** @return the next smallest number */
    int next() {
        TreeNode* topNode = nodeStack.top();
        nodeStack.pop();
        // Push all the leftmost nodes of the right subtree
        if (topNode->right) {
            pushAllLeftNodes(topNode->right);
        }
        return topNode->val;
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !nodeStack.empty();
    }

private:
    void pushAllLeftNodes(TreeNode* node) {
        while (node != NULL) {
            nodeStack.push(node);
            node = node->left;
        }
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
