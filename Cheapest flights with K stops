https://leetcode.com/problems/cheapest-flights-within-k-stops/submissions/1325765965/

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int, int>> adj[n];
        for(auto it: flights){
            int src = it[0];
            int dest = it[1];
            int dist = it[2];
            adj[src].push_back({dest, dist});
        }
        vector<int> dist(n, 1e9);
        dist[src]=0;
        queue<pair<int, pair<int, int>>> q;
        q.push({0, {src, 0}});

        while(!q.empty()){
            int stops = q.front().first;
            int node = q.front().second.first;
            int dis = q.front().second.second;
            q.pop();
            if(stops>k) continue;

            for(auto it: adj[node]){
                int adjNode = it.first;
                int adjDist = it.second;

                if(adjDist + dis < dist[adjNode] && stops<=k){
                    dist[adjNode] = adjDist + dis;
                    q.push({stops+1, {adjNode, dist[adjNode]}});
                }
            }
        }
       return (dist[dst]==1e9) ? -1: dist[dst];
    }
};
