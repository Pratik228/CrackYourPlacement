https://leetcode.com/problems/coin-change/


class Solution {
public:
    int coinsC(int idx, vector<int>& coins, int amount){
        if(idx==0){
            if(amount%coins[idx]==0) return (amount/coins[idx]);
            else return 1e9;
        }
        int pick=1e9;
        int notpick= coinsC(idx-1, coins, amount);
        if(coins[idx]<=amount){
            pick = 1 + coinsC(idx, coins, amount-coins[idx]);
        }
        return min(pick, notpick);
    }
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int>(amount+1, 1e9));
        for(int j=0; j<=amount; j++){
            if(j%coins[0]==0) dp[0][j] = (j/coins[0]);
            else dp[0][j]=1e9;
        }

        for(int idx=1; idx<n; idx++){
            for(int j=0; j<=amount; j++){
                int pick=1e9;
                int notpick= dp[idx-1][j];
                if(coins[idx]<=j){
                    pick = 1 + dp[idx][j-coins[idx]];
                }
                dp[idx][j]= min(pick, notpick);
            }
        }
        int ans =  dp[n-1][amount];
        return ans>=1e9?-1:ans;
    }
};
