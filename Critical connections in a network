class Solution {
public:
    int time=0;
    void dfs(int node, int parent, vector<int> adj[], vector<int> &visited, vector<int> &tin, vector<int> &low, vector<vector<int>> &bridges){
        visited[node]=1;
        tin[node] = low[node] = time;
        time++;
        for(auto it: adj[node]){
            if(it==parent) continue;
            if(!visited[it]){
                dfs(it, node, adj, visited, tin, low, bridges);
                low[node] = min(low[node], low[it]);

                if(low[it]>tin[node]){
                    bridges.push_back({it, node});
                }
            } else{
                low[node] = min(low[node], low[it]);

            }
            
        }

     }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<int> adj[n];
        vector<int> tin(n), low(n);
        for(auto it: connections){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        vector<int> visited(n, 0);
        vector<vector<int>> bridges;
        dfs(0, -1,  adj, visited, tin, low, bridges);
        return bridges;
    }
};
