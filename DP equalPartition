Both Recursion and Tabulation

class Solution{
public:
    bool subsetPossible(int idx, int arr[], int totsum, int N){
        if(totsum==0) return 1;
        if(totsum<0 || idx==N) return 0;
        int notPick = subsetPossible(idx+1, arr, totsum, N);
        int pick = subsetPossible(idx+1, arr, totsum-arr[idx], N);
        return pick || notPick;
    }
    
    int equalPartition(int N, int arr[])
    {
        // code here
        int sum = 0;
        for (int i = 0; i < N; i++) {
            sum += arr[i];
        }
        
        if (sum % 2 != 0) return 0;
        int target = sum/2;
        vector<vector<bool>> dp(N + 1, vector<bool>(target + 1, false));
        
        for (int i = 0; i <= N; i++) {
            dp[i][0] = true;
        }
        
        for (int idx = N - 1; idx >= 0; idx--) {
            for (int sum = 1; sum <= target; sum++) {
                bool notPick = dp[idx + 1][sum];
                bool pick = false;
                if (sum >= arr[idx]) {
                    pick = dp[idx + 1][sum - arr[idx]];
                }
                dp[idx][sum] = pick || notPick;
            }
        }
        
        return dp[0][target] ? 1 : 0;
        
    }
};
