Hard
https://leetcode.com/problems/minimum-path-sum/

// Same as unique path
class Solution {
public:
    int pathSum(int i, int j, vector<vector<int>>& grid ){
        if(i==0 && j==0) return grid[i][j];
        if(i<0 || j<0) return 1e9;
        int up = grid[i][j] + pathSum(i-1, j, grid);
        int left = grid[i][j] + pathSum(i, j-1, grid);
        return min(up, left) ;
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m, -1));

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(i==0 && j==0) dp[i][j]= grid[i][j];
                else if(j==0){
                    dp[i][j] = grid[i][j] + dp[i-1][j];
                }
                else if(i==0){
                    dp[i][j]  = grid[i][j] + dp[i][j-1];
                }else{
                    dp[i][j] =  grid[i][j] + min(dp[i][j-1],dp[i-1][j] ) ;
                }
                    
                }
            }
        return dp[n-1][m-1];
    }
};
