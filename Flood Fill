class Solution {
public:
    void bfs(vector<vector<int>>& newImage, int sr, int sc, int color, int initialColor){
        int n = newImage.size();
        int m = newImage[0].size();
        vector<int> delrow = {0, -1, 0, 1};
        vector<int> delcol = {-1, 0, 1, 0};

        queue<pair<int, int>> q;
        q.push({sr, sc});

        while(!q.empty()){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            newImage[row][col] = color;
            for(int i=0; i<4; i++){
                int nrow = delrow[i]+row;
                int ncol = delcol[i]+col;

                if(nrow<n and nrow>=0 && ncol<m&& ncol>=0 && newImage[nrow][ncol]==initialColor){
                    q.push({nrow, ncol});
                }
            }
        }
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        if(image[sr][sc]==color) return image;
        int n = image.size();
        int m = image[0].size();
       int  initialColor = image[sr][sc];
        vector<vector<int>> vis(n, vector<int>(m,-1));
        vis[sr][sc] = 1;
        vector<vector<int>> newImage = image;
        bfs(newImage, sr, sc, color, initialColor);
        return newImage;
    }
};
