Jump game: https://leetcode.com/problems/jump-game/


Brute to use recursion and later DP but still O(n^2):
// this approach is basically recursion but as we are generating many things so TC will be exponential
// class Solution {
// public:
//     bool validJump(int idx, vector<int>& nums){
//         int n = nums.size();
//         if(idx==n-1) return true; //reached end yayyyy
//         if(nums[idx]==0) return false; // as any in middle is 0 then obviously can't reach end

//         int maxJump = idx + nums[idx]; // max possible jump

//         for(int i=idx+1; i<=maxJump; i++){
//             if(i<n && validJump(i, nums)) return true;
//         }
//         return false;
//     }
//     bool canJump(vector<int>& nums) {
//         return validJump(0, nums);
//     }
// };

DP:
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        vector<bool> dp(n, false);
        dp[n - 1] = true; // We can always reach the end from the end itself

        // Iterate from the second last element to the first element
        for(int idx = n - 2; idx >= 0; idx--) {
            int maxJump = idx + nums[idx];
            // Check if we can reach any position that can itself reach the end
            for(int j = idx + 1; j <= maxJump && j < n; j++) {
                if(dp[j]) {
                    dp[idx] = true;
                    break;
                }
            }
        }
        return dp[0];
    }
};



This is optimized
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        int last = n - 1; // Initialize the last position to the last index of the array

        // Iterate from the second last element to the first element
        for (int idx = n - 2; idx >= 0; idx--) { 
            // Check if we can jump from the current index to or beyond the last position
            if (idx + nums[idx] >= last) {
                // If yes, update the last position to the current index
                last = idx;
            }
        }
        
        // If the last position is 0 or less, it means we can reach the end from the start
        return last <= 0;
    }
};
