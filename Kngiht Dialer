class Solution {
public:
    int knightDialer(int n) {
        const int mod = 1e9 +7;
        vector<vector<int>> possibleMoves = {
            {4, 6}, {6, 8}, {7, 9}, {4, 8}, 
            {0, 3, 9}, {}, {0, 1, 7}, {2, 6}, {1, 3},
            {2,4}
        };

        vector<vector<long long>> dp(n, vector<long long>(10, 0));
        for(int j=0; j<10; j++){
            dp[0][j] = 1;
        }
        for(int i=1; i<n; i++){
            for(int j=0; j<10; j++){
                for(int next : possibleMoves[j]){
                    dp[i][j] = (dp[i][j] + dp[i-1][next])%mod;
                }
            }
        }
        long long result=0;
        for(int j=0; j<10; j++){
            result  = (result+dp[n-1][j])%mod;
        }
        return result;
    }
};
