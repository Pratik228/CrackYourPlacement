https://leetcode.com/problems/maximum-width-of-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL) return 0;
        queue<pair<TreeNode*, unsigned long long>> q;
        q.push({root, 0});
        int ans=0;
        while(!q.empty()){
            unsigned long long mini = q.front().second;
            unsigned long long firstVal, lastVal;
            int s = q.size();
            
            for(int i=0; i<s; i++){
                unsigned long long currDis = q.front().second-mini;
                TreeNode* node = q.front().first;
                q.pop();
                if(i==0) firstVal = currDis;
                if(i==s-1) lastVal = currDis;
                if(node->left){
                    q.push({node->left, currDis*2+1});
                }
                if(node->right){
                    q.push({node->right, currDis*2+2});
                }
                ans= max(ans, static_cast<int>(lastVal - firstVal + 1));
            }
        }
        return ans;
    }
};
