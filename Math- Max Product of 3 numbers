https://leetcode.com/problems/maximum-product-of-three-numbers/

class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        // to handle the case when 2 negative as min multiplied and one max multiplied to give the max result
        int max1 = INT_MIN, max2 = INT_MIN, max3 = INT_MIN;
        int min1 = INT_MAX, min2 = INT_MAX;

        for(int i=0; i<nums.size(); i++){
                if(nums[i]>max1){
                    max3 = max2;
                    max2 = max1;
                    max1 = nums[i];
                }
                else if(nums[i]>max2){
                    max3 = max2;
                    max2 = nums[i];
                }
                else if(nums[i]>max3){
                    max3 = nums[i];
                }
               if(nums[i]<min1){
                    min2 = min1;
                    min1 = nums[i];
                }
                else if(nums[i]<min2){
                    min2 = nums[i];
                }
            }
        int mul1 = max1*max2*max3;
        int mul2 = min1*min2*max1;

        return max(mul1, mul2);
    }
};
// Not so Optimal as will miss many test cases
// class Solution {
// public:
//     int maximumProduct(vector<int>& nums) {
//         priority_queue<int, vector<int>, greater<int>> minH;
//         priority_queue<int> maxH;

//         for(int i=0; i<nums.size(); i++){
//                 minH.push(nums[i]);
//                 maxH.push(nums[i]);
//             }
//         int num1=1,num2=1;
//         for(int i=0; i<3; i++){
//             num1 *= minH.top();
//             minH.pop();
//             num2 *=maxH.top();
//             maxH.pop();
//         }

//         return max(num1, num2);
//     }
// };
