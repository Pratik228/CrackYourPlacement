https://leetcode.com/problems/number-of-islands/description/

class Solution {
public:
    void bfs(int row, int col, vector<vector<int>> &vis,  vector<vector<char>>& grid){
        queue<pair<int, int>> q;
        q.push({row, col});
        int n = grid.size();
        int m = grid[0].size();
        vector<int> delrow = {-1, 0, 1, 0};
        vector<int> delcol = {0, 1, 0, -1};
        vis[row][col] = 1;
        while(!q.empty()){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();

            for(int i=0; i<4; i++){
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];
                if(nrow<n && nrow>=0 && ncol<m && ncol>=0 && !vis[nrow][ncol] 
                && grid[nrow][ncol]=='1'){
                    vis[nrow][ncol]=1;
                    q.push({nrow, ncol});

                }
            }
        }

    }
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        int count = 0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]=='1' && !vis[i][j]){
                    count++;
                    bfs(i, j, vis, grid);
                    
                }
            }
        }
        return count;

        
    }
};
