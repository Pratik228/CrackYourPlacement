class TrieNode {
public:
    int wordIndex;
    vector<int> palindromePrefixRemaining;
    vector<TrieNode*> children;
    TrieNode() : wordIndex(-1), children(26, nullptr) {}
};

class Solution {
private:
    TrieNode* root;

    void insert(string& word, int index) {
        TrieNode* node = root;
        for (int i = word.length() - 1; i >= 0; i--) {
            int c = word[i] - 'a';
            if (!node->children[c]) {
                node->children[c] = new TrieNode();
            }
            if (isPalindrome(word, 0, i)) {
                node->palindromePrefixRemaining.push_back(index);
            }
            node = node->children[c];
        }
        node->wordIndex = index;
    }

    bool isPalindrome(const string& word, int left, int right) {
        while (left < right) {
            if (word[left++] != word[right--]) return false;
        }
        return true;
    }

public:
    vector<vector<int>> palindromePairs(vector<string>& words) {
        root = new TrieNode();
        vector<vector<int>> result;
        for (int i = 0; i < words.size(); i++) {
            insert(words[i], i);
        }
        for (int i = 0; i < words.size(); i++) {
            TrieNode* node = root;
            string& word = words[i];

            for (int j = 0; j <= word.length(); j++) {
                if (node->wordIndex != -1 && node->wordIndex != i && isPalindrome(word, j, word.length() - 1)) {
                    result.push_back({i, node->wordIndex});
                }
                if (j == word.length()) {
                    for (int index : node->palindromePrefixRemaining) {
                        if (index != i) {
                            result.push_back({i, index});
                        }
                    }
                    break;
                }

                node = node->children[word[j] - 'a'];
                if (!node) break;
            }
        }

        return result;
    }
};
