https://leetcode.com/problems/recover-binary-search-tree/submissions/1324902618/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* prev;
    TreeNode* firstViolation;
    TreeNode* mid;
    TreeNode* secondViolation;
    void inorder(TreeNode* root){
        if(root==NULL) return;
        inorder(root->left);
        if(prev!=NULL && (root->val<prev->val)){
            if(firstViolation==NULL){
                firstViolation = prev;
                mid=root;
            }
            else secondViolation=root;
        }
        prev=root;
        inorder(root->right);
    }

    void recoverTree(TreeNode* root) {
        firstViolation=secondViolation=mid = NULL;
        prev = new TreeNode(INT_MIN);
        inorder(root);
        if(firstViolation && secondViolation) swap(firstViolation->val, secondViolation->val);
        else if(firstViolation && mid) swap(firstViolation->val, mid->val);
    }
};
