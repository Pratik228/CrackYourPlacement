class DisjointSet{
    vector<int> parent, size;
    public:
        DisjointSet(int n){
            parent.resize(n+1);
            size.resize(n+1);
            for(int i=0; i<=n; i++){
                parent[i] = i;
                size[i] = 1;
            }
        }

        int findUpar(int node){
            if(node==parent[node]) return node;
            return parent[node] = findUpar(parent[node]);
        }

        bool unionBySize(int u, int v){
            int ulp_u = findUpar(u);
            int ulp_v = findUpar(v);
            if(ulp_u==ulp_v) return false;
            if(size[ulp_u]<size[ulp_v]){
                parent[ulp_u] = ulp_v;
                size[ulp_v]+=size[ulp_u];
            } else{
                parent[ulp_v] = ulp_u;
                size[ulp_u]+=size[ulp_v];
            }
            return true;
        }

};
class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        DisjointSet dis(n+1);
        vector<int> result;
        for(auto edge : edges){
            int u = edge[0];
            int v = edge[1];
            if(!dis.unionBySize(u, v)){
                return edge;
            }
        }
        return {};
        
    }
};
