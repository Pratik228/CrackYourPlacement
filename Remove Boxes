class Solution {
public:
    int dfs(vector<int>& boxes, int l, int r, int k, vector<vector<vector<int>>>& dp) {
        if (l > r) return 0;
        if (dp[l][r][k] != 0) return dp[l][r][k];

        int origR = r, origK = k;
        while (l < r && boxes[r] == boxes[r-1]) {
            r--;
            k++;
        }

        int result = (k+1) * (k+1) + dfs(boxes, l, r-1, 0, dp);

        for (int i = l; i < r; i++) {
            if (boxes[i] == boxes[r]) {
                result = max(result, dfs(boxes, l, i, k+1, dp) + dfs(boxes, i+1, r-1, 0, dp));
            }
        }

        return dp[l][origR][origK] = result;
    }

    int removeBoxes(vector<int>& boxes) {
        int n = boxes.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(n, 0)));
        return dfs(boxes, 0, n-1, 0, dp);
    }
};
