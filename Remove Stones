class DisjointSet{
    vector<int> size, parent;
    public:
        DisjointSet(int n){
            size.resize(n+1);
            parent.resize(n+1);
            for(int i=0; i<=n; i++){
                size[i] = 1;
                parent[i]=i;
            }
        }
        int findUpar(int node){
            if(parent[node]==node) return node;
            return parent[node] = findUpar(parent[node]);
        }
        void unionBySize(int u, int v){
            int ulp_u = findUpar(u);
            int ulp_v = findUpar(v);

            if(ulp_u==ulp_v) return;
            if(size[ulp_u]<size[ulp_v]){
                parent[ulp_u] = ulp_v;
                size[ulp_v] += size[ulp_u];
            }
            else{
                parent[ulp_v] = ulp_u;
                size[ulp_u] += size[ulp_v];
            }
        }


};
class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        int maxrow=0;
        int maxcol=0;

        for(auto it: stones){
            maxrow = max(maxrow, it[0]);
            maxcol = max(maxcol, it[1]);
        }
        DisjointSet dis(maxrow+maxcol+1);
        unordered_map<int, int> stoneNodes;
        for(auto it: stones){
            int nodeRow = it[0];
            int nodeCol = it[1] + maxrow+ 1;
            dis.unionBySize(nodeRow, nodeCol);
            stoneNodes[nodeRow] =1;
            stoneNodes[nodeCol] =1;
        }
        int count =0;
        for(auto it: stoneNodes){
            if(dis.findUpar(it.first)==it.first) count++;
        }
        return n - count;
    }
};

