class Solution {
public:
    vector<int> delrow = {0, -1, 0, 1};
    vector<int> delcol = {-1, 0, 1, 0};
    void dfs(int row, int col, vector<vector<bool>> &visited, 
    queue<pair<int, int>> &q, vector<vector<int>>& grid){
        int n = grid.size();
        visited[row][col]=true;
        q.push({row, col});

        for(int k=0; k<4; k++){
            int nrow = row + delrow[k];
            int ncol = col + delcol[k];

            if(nrow<n && nrow>=0 && ncol<n && ncol>=0 && 
            !visited[nrow][ncol] && grid[nrow][ncol]==1){
                dfs(nrow, ncol, visited, q, grid);
            }
        }

    }
    int shortestBridge(vector<vector<int>>& grid) {
        int n  = grid.size();
        vector<vector<bool>> visited(n, vector<bool>(n, false));
        queue<pair<int, int>> q;
        bool found = false;
        for(int i=0; i<n && !found; i++){
            for(int j=0; j<n && !found; j++){
                if (grid[i][j] == 1) {  
                    dfs(i, j, visited, q, grid);
                    found = true;
                }
            }
        }

        //bfs traversal
        int flips=0;
        while(!q.empty()){
            int size = q.size();
            while(size--){
                int row = q.front().first;
                int col = q.front().second;
                q.pop();

                for(int k=0; k<4; k++){
                    int nrow = row + delrow[k];
                    int ncol = col + delcol[k];
                    if(nrow<n && nrow>=0 && ncol<n && ncol>=0 && 
                    !visited[nrow][ncol]){
                        if(grid[nrow][ncol]==1) return flips;
                        q.push({nrow, ncol});
                        visited[nrow][ncol] = true;
                    }
                }
            }
            flips++;
        }
        return -1;
    }
};
