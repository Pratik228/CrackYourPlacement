class Solution {
public:
    int n;
    pair<int, int> getCoord(int num){
        int rowTop = (num-1)/n;
        int rowBot = (n-1) - rowTop;
        int col = (num-1)%n;

        if((n%2==0 && rowBot%2==0) || (n%2==1 && rowBot%2==1)){
            col = (n-1) -col;
        }

        return make_pair(rowBot, col);
    }
    int snakesAndLadders(vector<vector<int>>& board) {
         n = board.size();
         vector<vector<bool>> visited(n, vector<bool>(n, 0));
         visited[n-1][0] = 1;
         queue<int> q;
         q.push(1);
        int steps=0;
         while(!q.empty()){
            int s = q.size(); 
            while(s--){
                int num = q.front();
                q.pop();
                if(num==n*n) return steps;
                for(int i=1; i<=6; i++){
                    int path = num+i;
                    if(path>n*n) break;

                    pair<int, int> coord = getCoord(path);
                    int row = coord.first;
                    int col = coord.second;

                    if(visited[row][col]) continue;
                    visited[row][col] = 1;

                    if(board[row][col]==-1){
                        q.push(path);
                    } else{
                        q.push(board[row][col]);
                    }
                }
                
            }
            steps++;
            
         }

         return -1;
    }
};
