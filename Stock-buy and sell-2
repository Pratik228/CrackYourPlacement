Two approaches one is using recursion then the DP, tabulation(skipped memo as it is easy) space optimization is also easy after tabulation

class Solution {
public:
    int buyStocks(int idx, vector<int> &prices, bool canIbuy){
        if(idx==prices.size()){
            return 0;
        }
        int profit=0;
        if(canIbuy){
            profit = max(-prices[idx] + buyStocks(idx+1, prices, false), 
            buyStocks(idx+1, prices, true));
        } else{
            profit = max(prices[idx] + buyStocks(idx+1, prices, true), 
            buyStocks(idx+1, prices, false));
        }

        return profit;
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n+1, vector<int>(2, 0));
        dp[n][0] = dp[n][1] = 0;

        for(int idx=n-1; idx>=0; idx--){
            for(int buy=0; buy<=1; buy++){
                int profit=0;
                if(buy){
                    profit = max(-prices[idx] + dp[idx+1][0], dp[idx+1][1]);
                } else{
                    profit = max(prices[idx] + dp[idx+1][1], dp[idx+1][0]);
                }
                dp[idx][buy] = profit;
            }
        }
        return dp[0][1];
    }
};
