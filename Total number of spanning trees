First make that laplacian matrix then find the determinant after removing the first row and first col

#include <bits/stdc++.h>

using namespace std;

int determinant(vector<vector<int>>& matrix, int n) {
    if (n == 1) return matrix[0][0];
    if (n == 2) return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];

    int det = 0;
    for (int i = 0; i < n; i++) {
        vector<vector<int>> submatrix(n - 1, vector<int>(n - 1));
        for (int j = 1; j < n; j++) {
            int k = 0;
            for (int l = 0; l < n; l++) {
                if (l != i) {
                    submatrix[j-1][k] = matrix[j][l];
                    k++;
                }
            }
        }
        det += (i % 2 == 0 ? 1 : -1) * matrix[0][i] * determinant(submatrix, n - 1);
    }
    return det;
}

int countSpanningTrees(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<vector<int>> laplacian(n, vector<int>(n, 0));

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) {
                laplacian[i][i] = 0;
                for (int k = 0; k < n; k++) {
                    if (graph[i][k] == 1) laplacian[i][i]++;
                }
            } else {
                laplacian[i][j] = -graph[i][j];
            }
        }
    }

    vector<vector<int>> submatrix(n - 1, vector<int>(n - 1));
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < n; j++) {
            submatrix[i-1][j-1] = laplacian[i][j];
        }
    }

    return determinant(submatrix, n - 1);
}

int main() {
    vector<vector<int>> graph = {
        {0, 1, 1, 1},
        {1, 0, 1, 1},
        {1, 1, 0, 1},
        {1, 1, 1, 0}
    };

    cout << "Number of spanning trees: " << countSpanningTrees(graph) << endl;

    return 0;
}
