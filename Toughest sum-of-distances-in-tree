https://leetcode.com/problems/sum-of-distances-in-tree/

class Solution {
public:
    vector<vector<int>> adj;
    vector<int> calsize;
    vector<int> caldist;
    vector<int> result;

    void postOrderDFS(int node, int parent){
        calsize[node]=1;
        caldist[node]=0;
        for(auto it: adj[node]){
            if(it==parent) continue;
            postOrderDFS(it, node);

            calsize[node] += calsize[it];
            caldist[node] += calsize[it] + caldist[it];

        }
    }

    void preOrderDFS(int node, int parent, int n){
        for(auto it: adj[node]){
            if(it==parent) continue;
            result[it] = result[node] - calsize[it] + (n - calsize[it]);
            preOrderDFS(it, node, n);

        }

    }

    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        adj.resize(n);
        calsize.resize(n, 0);
        caldist.resize(n, 0);
        result.resize(n, 0);
        for(auto it: edges){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }

        postOrderDFS(0, -1);
        result[0] = caldist[0];
        preOrderDFS(0, -1, n);
        return result;
    }
};


explanation:
Sure, let's perform a dry run of the given solution on the example input `n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]`.

### Initialization:
- `n = 6`
- `edges = [[0, 1], [0, 2], [2, 3], [2, 4], [2, 5]]`

### Step 1: Build the Adjacency List
We build the adjacency list from the edges:
```
adj = [
    [1, 2], // neighbors of node 0
    [0],    // neighbors of node 1
    [0, 3, 4, 5], // neighbors of node 2
    [2],    // neighbors of node 3
    [2],    // neighbors of node 4
    [2]     // neighbors of node 5
]
```

### Step 2: Post-order DFS to Calculate Subtree Sizes and Distances

#### Call `postOrderDFS(0, -1)`
- `node = 0`, `parent = -1`
- Initialize `subtree_size[0] = 1` and `subtree_dist[0] = 0`
- Neighbors of node 0 are 1 and 2

#### Call `postOrderDFS(1, 0)`
- `node = 1`, `parent = 0`
- Initialize `subtree_size[1] = 1` and `subtree_dist[1] = 0`
- Neighbors of node 1 are 0 (which is parent, so skip)
- No other neighbors, return to previous call
- Update `subtree_size[0] += subtree_size[1] = 2`
- Update `subtree_dist[0] += subtree_dist[1] + subtree_size[1] = 1`

#### Call `postOrderDFS(2, 0)`
- `node = 2`, `parent = 0`
- Initialize `subtree_size[2] = 1` and `subtree_dist[2] = 0`
- Neighbors of node 2 are 0 (skip), 3, 4, 5

#### Call `postOrderDFS(3, 2)`
- `node = 3`, `parent = 2`
- Initialize `subtree_size[3] = 1` and `subtree_dist[3] = 0`
- Neighbors of node 3 are 2 (skip)
- No other neighbors, return to previous call
- Update `subtree_size[2] += subtree_size[3] = 2`
- Update `subtree_dist[2] += subtree_dist[3] + subtree_size[3] = 1`

#### Call `postOrderDFS(4, 2)`
- `node = 4`, `parent = 2`
- Initialize `subtree_size[4] = 1` and `subtree_dist[4] = 0`
- Neighbors of node 4 are 2 (skip)
- No other neighbors, return to previous call
- Update `subtree_size[2] += subtree_size[4] = 3`
- Update `subtree_dist[2] += subtree_dist[4] + subtree_size[4] = 2`

#### Call `postOrderDFS(5, 2)`
- `node = 5`, `parent = 2`
- Initialize `subtree_size[5] = 1` and `subtree_dist[5] = 0`
- Neighbors of node 5 are 2 (skip)
- No other neighbors, return to previous call
- Update `subtree_size[2] += subtree_size[5] = 4`
- Update `subtree_dist[2] += subtree_dist[5] + subtree_size[5] = 3`

Return to the call `postOrderDFS(0, -1)`
- Update `subtree_size[0] += subtree_size[2] = 6`
- Update `subtree_dist[0] += subtree_dist[2] + subtree_size[2] = 8`

### State after Post-order DFS:
```
subtree_size = [6, 1, 4, 1, 1, 1]
subtree_dist = [8, 0, 3, 0, 0, 0]
```

### Step 3: Pre-order DFS to Calculate Final Results

#### Call `preOrderDFS(0, -1, 6)`
- `node = 0`, `parent = -1`
- Initialize `result[0] = subtree_dist[0] = 8`
- Neighbors of node 0 are 1 and 2

#### Call `preOrderDFS(1, 0, 6)`
- `node = 1`, `parent = 0`
- Calculate `result[1] = result[0] - subtree_size[1] + (n - subtree_size[1]) = 8 - 1 + 5 = 12`
- No other neighbors, return to previous call

#### Call `preOrderDFS(2, 0, 6)`
- `node = 2`, `parent = 0`
- Calculate `result[2] = result[0] - subtree_size[2] + (n - subtree_size[2]) = 8 - 4 + 2 = 6`
- Neighbors of node 2 are 0 (skip), 3, 4, 5

#### Call `preOrderDFS(3, 2, 6)`
- `node = 3`, `parent = 2`
- Calculate `result[3] = result[2] - subtree_size[3] + (n - subtree_size[3]) = 6 - 1 + 5 = 10`
- No other neighbors, return to previous call

#### Call `preOrderDFS(4, 2, 6)`
- `node = 4`, `parent = 2`
- Calculate `result[4] = result[2] - subtree_size[4] + (n - subtree_size[4]) = 6 - 1 + 5 = 10`
- No other neighbors, return to previous call

#### Call `preOrderDFS(5, 2, 6)`
- `node = 5`, `parent = 2`
- Calculate `result[5] = result[2] - subtree_size[5] + (n - subtree_size[5]) = 6 - 1 + 5 = 10`
- No other neighbors, return to previous call

### State after Pre-order DFS:
```
result = [8, 12, 6, 10, 10, 10]
```

### Final Output:
```
Output: [8, 12, 6, 10, 10, 10]
```

### Explanation:

- For node 0: distance sum = 8
- For node 1: distance sum = 12
- For node 2: distance sum = 6
- For node 3: distance sum = 10
- For node 4: distance sum = 10
- For node 5: distance sum = 10

The given code efficiently calculates the sum of distances from each node to every other node in the tree using two DFS passes, maintaining time complexity of O(n) with space complexity of O(n).
