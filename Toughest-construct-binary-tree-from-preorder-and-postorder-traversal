https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructTree(vector<int>& preorder, vector<int>& postorder, int &preIdx, int postStart, int postEnd, unordered_map<int, int> &postOdr ){
        if(preIdx>=preorder.size() || postStart > postEnd) return NULL;
        TreeNode* root = new TreeNode(preorder[preIdx++]);

        if(preIdx>=preorder.size() || postStart==postEnd) return root;

        int leftIdx = postOdr[preorder[preIdx]];
        if(leftIdx < postEnd){
            root->left = constructTree(preorder, postorder, preIdx, 
            postStart, leftIdx, postOdr);
            root->right = constructTree(preorder, postorder, preIdx, 
            leftIdx+1, postEnd-1, postOdr);

        }
        return root;

    }
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        unordered_map<int, int> postOdr;
        for(int i=0; i<postorder.size(); i++){
            postOdr[postorder[i]]=i;
        }
        int preIdx =0;
        return constructTree(preorder, postorder, preIdx, 0, postorder.size()-1, postOdr);
    }
};

