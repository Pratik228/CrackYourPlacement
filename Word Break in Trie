

struct Node {
    Node* links[26];
    bool flag;

    Node() {
        for (int i = 0; i < 26; i++) {
            links[i] = NULL;
        }
        flag = false;
    }

    bool containsKey(char ch) {
        return links[ch - 'a'] != NULL;
    }

    void put(char ch, Node* node) {
        links[ch - 'a'] = node;
    }

    Node* get(char ch) {
        return links[ch - 'a'];
    }

    void setEnd() {
        flag = true;
    }

    bool isEnd() {
        return flag;
    }
};

class Solution {
private:
    Node* root;
public:
    Solution() {
        root = new Node();
    }

    void addWord(string s) {
        Node* node = root;
        for (int i = 0; i < s.size(); i++) {
            if (!node->containsKey(s[i])) {
                node->put(s[i], new Node());
            }
            node = node->get(s[i]);
        }
        node->setEnd();
    }

    bool wordBreakHelper(string A, Node* root, vector<int>& dp, int start) {
        if (start == A.size()) {
            return true;
        }
        if (dp[start] != -1) {
            return dp[start];
        }

        Node* node = root;
        for (int i = start; i < A.size(); i++) {
            if (node->containsKey(A[i])) {
                node = node->get(A[i]);
                if (node->isEnd() && wordBreakHelper(A, root, dp, i + 1)) {
                    return dp[start] = true;
                }
            } else {
                break;
            }
        }

        return dp[start] = false;
    }

    bool wordBreak(string A, vector<string>& B) {
        for (int i = 0; i < B.size(); i++) {
            addWord(B[i]);
        }

        vector<int> dp(A.size(), -1);
        return wordBreakHelper(A, root, dp, 0);
    }
};
