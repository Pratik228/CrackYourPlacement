/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

//optimized one using stacks
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> s1, s2;
        while(l1!=NULL){
            s1.push(l1->val);
            l1 = l1->next;
        }
        while(l2!=NULL){
            s2.push(l2->val);
            l2 = l2->next;
        }
        int carry=0;
        ListNode* temp = new ListNode(0);
        while(!s1.empty() || !s2.empty() || carry!=0){
            int sum = carry;
            if (!s1.empty()) {
                sum += s1.top();
                s1.pop();
            }
            if (!s2.empty()) {
                sum += s2.top();
                s2.pop();
            }
            carry = sum / 10;
            ListNode* curr = new ListNode(sum%10);
            curr->next = temp->next;
            temp->next = curr;
        
        }
        
        return temp->next;
    }
};



// First approach with reversing
// class Solution {
// public:
//     ListNode* reverseNode(ListNode* head){
//         ListNode* curr = head;
//         ListNode* prev =NULL;
//         while(curr!=NULL){
//             ListNode* next = curr->next;
//             curr->next = prev;
//             prev = curr;
//             curr = next;
//         }
//         return prev;
//     }
//     ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
//         l1 = reverseNode(l1);
//         l2  = reverseNode(l2);
//         ListNode* p = l1;
//         ListNode* q = l2;
//         int carry=0;
//         ListNode* temp = new ListNode(0);
//         ListNode *curr = temp;
//         while(p!=NULL || q!=NULL){
//             int val1 = (p!=NULL)?p->val:0;
//             int val2 = (q!=NULL)?q->val:0;
//             int sum = val1+val2+carry;
//             carry = sum/10;
//             curr->next = new ListNode(sum%10);
//             curr = curr->next;
//             if(p!=NULL) p=p->next;
//             if(q!=NULL) q=q->next;
//         }
//          if(carry>0){
//             curr->next = new ListNode(carry);
//         }
//         return reverseNode(temp->next);
//     }
// };
