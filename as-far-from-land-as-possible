class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> dist(n, vector<int>(n, -1));
        queue<pair<int, int>> q;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j]==1) {
                    q.push({i, j});
                    dist[i][j]=0;
                }
            }
        }
        if(q.empty() || q.size()==n*n) return -1;

        vector<int> delrow = {0, -1, 0, 1};
        vector<int> delcol = {-1, 0, 1, 0};
        int maxDist=-1;
        while(!q.empty()){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            for(int k=0; k<4; k++){
                int nrow = row + delrow[k];
                int ncol = col + delcol[k];

                if(nrow<n && nrow>=0 && ncol<n && ncol>=0 && dist[nrow][ncol]==-1){
                    dist[nrow][ncol] = dist[row][col] + 1;
                    maxDist = max(dist[nrow][ncol], maxDist);
                    q.push({nrow, ncol});
                }
            }
        }
        return maxDist;
    }
};
