class Solution
{
    public:
    //Function to find maximum of minimums of every window size.
    vector <int> maxOfMin(int arr[], int n)
    {
        // Your code here
        vector<int> left(n, -1);
        vector<int> right(n, n);
        stack<int> st;
        
        for(int i=0; i<n; i++){
            while(!st.empty() && arr[st.top()]>=arr[i]){
                st.pop();
            }
            if(!st.empty()){
                left[i] = st.top();
            }
            st.push(i); 
        }
        //left =-1 0 1 2 -1 4 4
        
        while(!st.empty()){
            st.pop();
        }
        
        for(int i=n-1; i>=0; i--){
            while(!st.empty() && arr[st.top()]>=arr[i]){
                st.pop();
            }
            if(!st.empty()){
                right[i] = st.top(); 
            }
            st.push(i); // 
        }
        //right 4 4 4 4 7 6 7
        
        vector<int> ans(n, 0);
        
        for (int i = 0; i < n; i++) {
            int len = right[i] - left[i] - 1;
            ans[len - 1] = max(ans[len - 1], arr[i]);
        }
        
    
        for (int i = n - 2; i >= 0; i--) {
            ans[i] = max(ans[i], ans[i + 1]);
        }
        
        return ans;
        
        
    }
};
