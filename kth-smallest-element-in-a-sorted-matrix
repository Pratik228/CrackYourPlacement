https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/

//more optimized
class Solution {
public:
    int lesserCount(vector<vector<int>>& matrix, int val){
        int n = matrix.size();
        int row = n-1;
        int col=0;
        int count=0;
        while(row>=0 && col<n){
            if(matrix[row][col]<=val){
                count += (row+1);
                col++;
            }else{
                row--;
            }
        }
        return count;

    }
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        priority_queue<int> maxH;
        int n = matrix.size();
        int m = matrix[0].size();

        int low = matrix[0][0];
        int high = matrix[n-1][m-1];
        while(low<high){
            int mid = ((low+high)>>1);
            int count = lesserCount(matrix, mid);
             if(count<k){
                low = mid+1;
            } else{
                high = mid;;
            }
        }
        return low;
        
    }
};


// class Solution {
// public:
//     int kthSmallest(vector<vector<int>>& matrix, int k) {
//         priority_queue<int> maxH;
//         int n = matrix.size();
//         int m = matrix[0].size();
//         for(int i=0; i<n; i++){
//             for(int j=0; j<m; j++){
//                 maxH.push(matrix[i][j]);
//                 if(maxH.size()>k){
//                     maxH.pop();
//                 }
//             }
//         }
//         return maxH.top();
//     }
// };
