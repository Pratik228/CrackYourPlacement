class Solution {
public:
    vector<int> delrow = {0, 1, 0, -1};
    vector<int> delcol = {-1, 0, 1, 0};
    int dfs(int row, int col, vector<vector<int>>& matrix,  vector<vector<int>> &dp, int m, int n){
        if(dp[row][col]!=-1) return dp[row][col];
        int maxpath = 1;
        for(int k=0; k<4; k++){
            int nrow = row+delrow[k];
            int ncol = col + delcol[k];

            if(nrow<m && nrow>=0 && ncol<n && ncol>=0 && matrix[nrow][ncol]>matrix[row][col]){
                maxpath = max(maxpath, 1+dfs(nrow, ncol, matrix, dp, m, n));
            }
        }
        return dp[row][col] = maxpath;

    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.empty() || matrix[0].empty()) return 0;
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        int longestPath=0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                longestPath = max(longestPath, dfs(i, j, matrix, dp, m, n));
            }
        }
        return longestPath;
    }
};
