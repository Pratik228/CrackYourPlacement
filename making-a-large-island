class DisjointSet {
public:
    vector<int> parent, size;
    DisjointSet(int n) {
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        DisjointSet dis(n*n);
        int ans =0;
        vector<int> delrow = {-1, 0, 1, 0};
        vector<int> delcol = {0, 1, 0, -1};
        
        for(int row=0; row<n; row++){
            for(int col=0; col<n; col++){

                if(grid[row][col]==0) continue;

                for(int k=0; k<=3; k++){
                    int nrow = row + delrow[k];
                    int ncol = col + delcol[k];

                    if(nrow<n && nrow>=0 && ncol<n && ncol>=0 && grid[nrow][ncol]==1){
                        int nodeNo = row * n+ col;
                        int adjNodeNo = nrow * n+ ncol;
                        if(dis.findUPar(nodeNo)!=dis.findUPar(adjNodeNo)){
                            dis.unionBySize(nodeNo, adjNodeNo);
                        }
                    }
                }
            }
        }
        
        for(int row=0; row<n; row++){
            for(int col=0; col<n; col++){

                if(grid[row][col]==1) continue;
                set<int> st;
                for(int k=0; k<=3; k++){
                    int nrow = row + delrow[k];
                    int ncol = col + delcol[k];

                    if(nrow<n && nrow>=0 && ncol<n && ncol>=0 && grid[nrow][ncol]==1){
                        int adjNodeNo = nrow * n+ ncol;
                        st.insert(dis.findUPar(adjNodeNo));
                    }
                }
            int sizetotal = 0;
            for( auto it: st){
                sizetotal += dis.size[it];
            }
            ans = max(ans, sizetotal +1);
            }
        }

        //if all are 1 case
        for(int cell=0; cell< n*n; cell++){
            ans = max(ans, dis.size[dis.findUPar(cell)]);
        }
        return ans;
    }
};
