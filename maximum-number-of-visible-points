class Solution {
public:
    int visiblePoints(vector<vector<int>>& points, int angle, vector<int>& location) {
        int samePoints=0;
        vector<double> angles;
        for(auto point : points){
            if(point[0]==location[0] && point[1]==location[1]) samePoints++;
            else{
                double dx = point[0] -location[0];
                double dy = point[1] -location[1];
                angles.push_back(atan2(dy, dx)*180 / M_PI);
            }    
        }
        int n = angles.size();
        sort(angles.begin(), angles.end());
        for(int i=0; i<n; i++){
            angles.push_back(angles[i]+360);
        }
        
        int maxPoints=0;
        int start=0;
        for(int i=0; i<angles.size(); i++){
            while(angles[i] - angles[start] > angle) start++;
            maxPoints = max(maxPoints, i-start+1);
        }
        return min(maxPoints, n) + samePoints;

    }
};
