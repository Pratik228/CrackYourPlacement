https://www.geeksforgeeks.org/problems/minimum-swaps/1
class Solution 
{
    public:
    //Function to find the minimum number of swaps required to sort the array. 
	int minSwaps(vector<int>&nums)
	{
	    // Code here
	    int n = nums.size();
	    vector<pair<int, int>> ordering(n);
	    for(int i=0; i<n; i++){
	        ordering[i] = {nums[i], i};
	    }
	    
	    sort(ordering.begin(), ordering.end());
	    // 2 4 5 8
	    // 0 3 2 1
	    
	    vector<int> visited(n, 0);
	    int swaps=0;
	    for(int i=0; i<n; i++){
	        if(visited[i] || ordering[i].second==i) continue;
	        
	        int cycle=0;
	        int j=i;
	        
	        while(visited[j]!=1){
	            visited[j] =1;
	            j = ordering[j].second;
	            cycle++;
	        }
	        if(cycle>0){
	            swaps += cycle-1;
	        }
	    }
	    return swaps;
	}
};
