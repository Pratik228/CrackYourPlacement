used dfs but in a smart way, also to handle the visited and the backtracking stuffs
public:
    vector<int> delrow = {0, -1, 0, 1};
    vector<int> delcol = {-1, 0, 1, 0};
    vector<char> directions = {'L', 'U', 'R', 'D'};
    void dfs(int idxi, int idxj, vector<vector<int>> &mat,vector<string> &finpath,vector<vector<int>> &visited, string path, int n){
        if(idxi==n-1 && idxj==n-1){
            finpath.push_back(path);
            return;
        }
        visited[idxi][idxj]=1;
        for(int i=0; i<4; i++){
            int nrow = delrow[i] + idxi;
            int ncol = delcol[i] + idxj;
            
            if(nrow<n && nrow>=0 && ncol>=0 && ncol<n && mat[nrow][ncol]==1 &&
            visited[nrow][ncol]==0){
                
                path+=directions[i];
                dfs(nrow, ncol, mat, finpath, visited, path, n);
                path.pop_back();
            }
        }
        visited[idxi][idxj]=0;
        
    }
    vector<string> findPath(vector<vector<int>> &mat) {
        // Your code goes here
        vector<string> finpath;
        int n = mat.size();
        vector<vector<int>> visited(n, vector<int>(n, 0));
        if (n == 0 || mat[0][0] == 0 || mat[n-1][n-1] == 0) {
            return finpath; // If start or end is blocked, no path exists.
        }
        dfs(0, 0, mat, finpath, visited,  "", n);
        return finpath;
    }
