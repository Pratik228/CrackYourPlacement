class DisjointSet {
    vector<int> size, parent;
    public:
        DisjointSet(int n){
            size.resize(n+1);
            parent.resize(n+1);
            for(int i=0; i<=n; i++){
                parent[i] =i;
                size[i] =1;
            }
        }

       int findUpar(int node){
            if(node==parent[node]) return node;
            return parent[node]=findUpar(parent[node]);
       }

       void unionBySize(int u, int v){
            int ulp_u = findUpar(u);
            int ulp_v = findUpar(v);
            if(ulp_u==ulp_v) return;
            if(size[ulp_u]<size[ulp_v]){
                parent[ulp_u] = ulp_v;
                size[ulp_v]+=size[ulp_u];
            }
            else{
                parent[ulp_v] = ulp_u;
                size[ulp_u]+=size[ulp_v];
            }
       }
};
class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        DisjointSet dis(n);
        int extraEdges=0;
        for(auto it: connections){
            int u = it[0];
            int v = it[1];
            if(dis.findUpar(u)==dis.findUpar(v)){
                extraEdges++;
            } else{
                dis.unionBySize(u, v);
            }
        }
        int nc =0;
        for(int i=0; i<n; i++){
            if(dis.findUpar(i)==i) nc++;
        }
        int ans = nc-1;
        if(extraEdges>=ans){
            return ans;
        }
        return -1;
    }
};
