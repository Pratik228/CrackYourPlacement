/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


https://leetcode.com/problems/range-sum-of-bst/description/
// we can do like this also a straighforward recursion:
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        if(root==NULL) return 0;
        if(root->val<=high && root->val>=low){
            return root->val + rangeSumBST(root->left, low, high) + 
            rangeSumBST(root->right, low, high);
        }
        if(root->val < low) return rangeSumBST(root->right, low, high);
        return rangeSumBST(root->left, low, high);
    }
};

 //ummm as BST is like inorder traversal so we can do like this
// class Solution {
// public:
//     int inorder(TreeNode* root, int low, int high, int &sum){
//         if (root==NULL) return 0;
//         inorder(root->left, low, high, sum);
//         if(root->val<=high && root->val>=low) sum+=root->val;
//         inorder(root->right, low, high, sum);
//         return sum;

//     }
//     int rangeSumBST(TreeNode* root, int low, int high) {
//         if(root==NULL) return 0;
//         int sum=0;
//         return inorder(root, low, high, sum);
//     }
// };
