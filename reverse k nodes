/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* node){
        ListNode* curr = node;
        ListNode* prev = NULL;
        while(curr!=NULL){
            ListNode* next= curr->next;
            curr->next = prev;
            prev = curr;
            curr=next;
        }
        return prev;
    }
    ListNode* getKthNode(ListNode* head, int k){
        k -=1;
        while(head !=NULL && k>0){
            head=head->next;
            k--;
        }
        return head;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp= head;
        ListNode* prev = NULL;
        while(temp!=NULL){
            ListNode* KthNode = getKthNode(temp, k);
            if(KthNode==NULL){
                if(prev) prev->next = temp;
                break;
            }
            
            ListNode* nextNode = KthNode->next;
            KthNode->next=NULL;
            reverse(temp);
            if(temp==head){
                head = KthNode;
            }else{
                prev->next=KthNode;
            }
            prev =temp;
            temp = nextNode;
        }
        return head;
    }
};
