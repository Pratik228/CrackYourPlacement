https://leetcode.com/problems/serialize-and-deserialize-binary-tree/submissions/1324475877/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root==NULL) return "";
        string serial ="";
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            if(node==NULL) serial+="#,";
            else serial+=to_string(node->val)+',';
            if(node!=NULL){
                q.push(node->left);
                q.push(node->right);
            }

        }
        return serial;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size()==0) return NULL;
        stringstream serial(data);
        string ans;
        getline(serial, ans, ',');
        TreeNode* root = new TreeNode(stoi(ans));
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            getline(serial, ans, ',');
            if(ans=="#"){
                node->left=NULL;
            }else{
                TreeNode* leftNode = new TreeNode(stoi(ans));
                node->left= leftNode;
                q.push(leftNode);
            }
            getline(serial, ans, ',');
            if(ans=="#"){
                node->right=NULL;
            }else{
                TreeNode* rightNode = new TreeNode(stoi(ans));
                node->right= rightNode;
                q.push(rightNode);
            }

        }
        return root;


    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
