/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
     ListNode* merge(ListNode* left, ListNode* right) {
        ListNode dummy(0);
        ListNode* temp = &dummy;
        while (left != nullptr && right != nullptr) {
            if (left->val < right->val) {
                temp->next = left;
                left = left->next;
            } else {
                temp->next = right;
                right = right->next;
            }
            temp = temp->next;
        }
        if (left != nullptr) temp->next = left;
        else temp->next = right;

        return dummy.next;
    }
    ListNode* midList(ListNode* head){
        ListNode* slow = head;
        ListNode* fast= head;
        ListNode* prev = NULL;
        while(fast!=NULL && fast->next!=NULL){
            prev= slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        return prev;
    }
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL) return head;
        ListNode* mid = midList(head);
        ListNode* right = mid->next;
        mid->next=NULL;
        ListNode* leftSort = sortList(head);
        ListNode* rightSort = sortList(right);
        
        return merge(leftSort, rightSort);
        
    }
};
