class Solution {
public:
    Node* reverse(Node* head) {
        Node* prev = nullptr;
        Node* curr = head;
        Node* next = nullptr;
        while (curr != nullptr) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    int length(Node* head) {
        int len = 0;
        while (head) {
            len++;
            head = head->next;
        }
        return len;
    }

    bool isGreater(Node* l1, Node* l2) {
        int len1 = length(l1), len2 = length(l2);
        if (len1 != len2) return len1 > len2;
        
        while (l1 && l2) {
            if (l1->data != l2->data) return l1->data > l2->data;
            l1 = l1->next;
            l2 = l2->next;
        }
        return false;
    }

    Node* subLinkedList(Node* l1, Node* l2) {
        while (l1 && l1->data == 0) l1 = l1->next;
        while (l2 && l2->data == 0) l2 = l2->next;

        if (!l1 && !l2) return new Node(0);

        if (!isGreater(l1, l2)) {
            Node* temp = l1;
            l1 = l2;
            l2 = temp;
        }

        l1 = reverse(l1);
        l2 = reverse(l2);

        Node* dummy = new Node(0);
        Node* curr = dummy;
        int borrow = 0;

        while (l1) {
            int x = l1->data;
            int y = (l2) ? l2->data : 0;

            int diff = x - y - borrow;
            if (diff < 0) {
                diff += 10;
                borrow = 1;
            } else {
                borrow = 0;
            }

            curr->next = new Node(diff);
            curr = curr->next;

            l1 = l1->next;
            if (l2) l2 = l2->next;
        }

        Node* result = reverse(dummy->next);

        while (result && result->data == 0) {
            Node* temp = result;
            result = result->next;
            delete temp;
        }
        if (!result) result = new Node(0);

        delete dummy;
        return result;
    }
};
