class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        priority_queue<pair<int, pair<int,int>>, vector<pair<int, pair<int,int>>>, greater<pair<int, pair<int,int>>>> pq;
        int n = grid.size();
        vector<vector<int>> visited(n, vector<int>(n, 0));

        pq.push({grid[0][0], {0, 0}});
        int maxSofar = grid[0][0];
        vector<int> delrow = {0, -1, 0, 1};
        vector<int> delcol = {-1, 0, 1, 0};
        visited[0][0] =1;

        while(!pq.empty()){
            auto [time, coord] = pq.top();
            auto [row, col] = coord;
            pq.pop();
            maxSofar = max(maxSofar, time);
            if(row==n-1 && col==n-1) return maxSofar;
            for(int i=0; i<4; i++){
                int nrow = delrow[i] +row;
                int ncol = delcol[i] + col;

                if(nrow<n && nrow>=0 && ncol<n && ncol>=0 && visited[nrow][ncol]!=1){
                    pq.push({grid[nrow][ncol], {nrow, ncol}});
                    visited[nrow][ncol]=1;

                }
            }
        }
        return maxSofar;

    }
};
