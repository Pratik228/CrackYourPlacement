class Solution {
public:
    vector<int> delrow = {-1, 0, 1, 0};
    vector<int> delcol = {0, 1, 0, -1};
    int emptySquares;

    int dfs(int row, int col, vector<vector<int>>& grid, int visited, int m, int n){
        if(row<0 || row>=m || col>=n || col<0 || grid[row][col]==-1){
            return 0;
        }
        if(grid[row][col]==2){
            return (emptySquares==visited)? 1:0;
        }
        int path=0;
        int original = grid[row][col];
        grid[row][col]=-1;

        for(int i=0; i<4; i++){
            int nrow = row+delrow[i];
            int ncol = col + delcol[i];

            path += dfs(nrow, ncol, grid, visited+1, m, n);
        }
        grid[row][col]=original;
        return path;
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int firstRow, firstCol;
        emptySquares=1;

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j]==1){
                    firstRow = i;
                    firstCol = j;
                } else if(grid[i][j]==0){
                    emptySquares++;
                }
                
            }
        }
        return dfs(firstRow, firstCol, grid, 0, m, n);
    }
};
